#!/usr/bin/env sh
#
#
#    ___     _  _  _        _    
#   | __| __| |(_)| |_  ___| |_  
#   | _| / _` || ||  _|(_-<| ' \ 
#   |___|\__,_||_| \__|/__/|_||_|
#                        
#   A text editor written entirely in a single shell script,
#   with support for editing existing and nonexisting files, and
#   an integrated file chooser.
#
#
#
#   MIT License
#   
#   Copyright (c) 2018 Aidan Williams 
#   
#   Permission is hereby granted, free of charge, to any person obtaining a copy
#   of this software and associated documentation files (the "Software"), to deal
#   in the Software without restriction, including without limitation the rights
#   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#   copies of the Software, and to permit persons to whom the Software is
#   furnished to do so, subject to the following conditions:
#   
#   The above copyright notice and this permission notice shall be included in all
#   copies or substantial portions of the Software.
#   
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#   SOFTWARE.
#

# Config options
export EDITSH_DIALOG="dialog" # Xdialog or dialog, typically

# Variables used in more than one function

__editsh_first_arg="$1"       # Argument passed that could be the file
__editsh_file=""              # Variable refering to the file passed
__editsh_file_is_dir=0        # Value determines wether the file passed is actually a directory
__editsh_choose_file=0        # Value determines if the file chooser needs to be displayed

if [ -f ~/.editshrc ]; then
  source ~/.editshrc
fi

# Functions

__editsh_get_file() { # Determines if file chooser is needed, if not it sets the file
  if [ ! "$__editsh_first_arg" = "" ]; then
    __editsh_file="$__editsh_first_arg"

    if [ -d "$__editsh_first_arg" ]; then # Checks if file passed is a directory
      __editsh_file_is_dir=1
      __editsh_choose_file=1
    fi
  else
    # Indicates no file was passed, and to open the file chooser
    __editsh_choose_file=1
  fi
}

__editsh_file_chooser() { # Prompts user for file if needed
  __editsh_file_chooser_dir="./" # Sets current directory as the default for the file chooser

  # Makes sure the path ends with /, as file chooser won't display directory without it
  if [ "$__editsh_file_is_dir" = 1 ]; then
    __editsh_file_chooser_dir="$__editsh_first_arg/"
  fi
  
  if [ ! "$1" = '' ]; then
    __editsh_file_chooser_dir="$1"
  fi

  # Opens the file chooser and sets the file choosen as the file to be edited
  __editsh_file="$($EDITSH_DIALOG --stdout --title 'Choose file' --fselect $__editsh_file_chooser_dir 20 70)"

  if [ -d "$__editsh_file" ]; then
    __editsh_file_chooser "$__editsh_file" 
  fi
}


__editsh_edit_file() { # Edits and saves file
  __editsh_current_file="$1"
  
  # Create the file if it doesn't exist already
  if [ ! -f "$__editsh_current_file" ]; then
    touch "$__editsh_current_file"
  fi
  
  # Shows edit dialog, and stores the edited contents
  __editsh_output="$($EDITSH_DIALOG --stdout --title "Edit $(basename $__editsh_current_file)" --editbox "$__editsh_current_file" 100 100)" 

  # Return code from the edit prompt
  __editsh_editor_ret_code="$?"
  
  if [ "$__editsh_editor_ret_code" = 0 ]; then
    if [ -w "$__editsh_current_file" ]; then
      echo "$__editsh_output" > "$__editsh_current_file"
    else
      echo "$__editsh_output" | sudo tee "$__editsh_current_file"
    fi
  else 
    # If the dialog didn't return zero (i.e. because it was cancelled), doesn't write to the file
    return 0 
  fi
}

# Main function
__editsh_main() { 
  __editsh_get_file
  
  if [ "$__editsh_choose_file" = 1 ]; then
    __editsh_file_chooser
  fi

  __editsh_edit_file "$__editsh_file"
  return 0 
}


# Invoke main function
__editsh_main
